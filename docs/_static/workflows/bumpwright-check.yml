name: bumpwright version check

on:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  decide:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full history + tags)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install bumpwright
        run: pip install --upgrade bumpwright

      - name: Compute suggestion (json & md)
        id: suggest
        run: |
          bumpwright decide --format json > .bump.json
          bumpwright decide --format md > .bump.md
          python - <<'PY'
          import json, os
          j=json.load(open(".bump.json"))
          suggested=j.get("suggested") or j.get("bump") or ""
          next_version=j.get("next_version") or ""
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"suggested={suggested}\n")
              f.write(f"next_version={next_version}\n")
          PY

      - name: Add summary to job
        run: |
          {
            echo "### Bumpwright suggestion"; echo;
            cat .bump.md
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Comment on PR (sticky)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('.bump.md', 'utf8');
            const marker = '<!-- bumpwright-suggestion -->';
            const payload = body + '\n\n' + marker;

            const {owner, repo} = context.repo;
            const issue_number = context.issue.number;

            const { data: comments } = await github.rest.issues.listComments({
              owner, repo, issue_number
            });

            const prev = comments.find(c => c.user.type === 'Bot' && c.body && c.body.includes(marker));
            if (prev) {
              await github.rest.issues.updateComment({
                owner, repo, comment_id: prev.id, body: payload
              });
            } else {
              await github.rest.issues.createComment({
                owner, repo, issue_number, body: payload
              });
            }
